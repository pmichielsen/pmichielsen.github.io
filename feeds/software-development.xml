<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PeetRonics' blog - Software Development</title><link href="http://peetronics.com/" rel="alternate"></link><link href="http://peetronics.com/feeds/software-development.xml" rel="self"></link><id>http://peetronics.com/</id><updated>2019-11-23T21:00:00+00:00</updated><subtitle>All can be true!</subtitle><entry><title>What I Have Learned Today - #019</title><link href="http://peetronics.com/WhatIHaveLearnedToday-019.html" rel="alternate"></link><published>2019-11-23T21:00:00+00:00</published><updated>2019-11-23T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-23:/WhatIHaveLearnedToday-019.html</id><summary type="html">&lt;p&gt;The importance of code reviews&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="github code review example" src="http://peetronics.com/images/code-review.png" width="80%"&gt;  &lt;/p&gt;
&lt;h1&gt;The importance of code reviews&lt;/h1&gt;
&lt;p&gt;Code reviews are one of many important mechanisms (or rituals if you like) to ensure &lt;em&gt;quality&lt;/em&gt; of your software project/product. Potential bugs can be caught early as well as negative performance / security implications.  &lt;/p&gt;
&lt;p&gt;What I find though, what is not mentioned enough, is that code reviews are also a great vehicle for knowledge transfer. By participating as a reviewer you can &lt;strong&gt;learn&lt;/strong&gt; a lot.  &lt;/p&gt;
&lt;p&gt;That‚Äôs why I make an effort to get involved in code reviews as much as possible.  &lt;/p&gt;
&lt;h1&gt;Respectful Reviews&lt;/h1&gt;
&lt;p&gt;While enjoying my morning cup of coffee and reading through blog posts, I came across this &lt;a href="https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html"&gt;article&lt;/a&gt; from the &lt;a href="https://testing.googleblog.com/"&gt;Google Testing Blog&lt;/a&gt;. It is list of &lt;em&gt;do‚Äôs&lt;/em&gt; and &lt;em&gt;don‚Äôts&lt;/em&gt; for code reviews, aimed both at authors and reviewers. A quick read and very helpful tips to make reviews better.  &lt;/p&gt;
&lt;p&gt;As an added bonus the article can be printed on one &lt;a href="https://docs.google.com/document/d/1_Gljf1TMTV2WPsiXCdk8oIkiq6uiajN_IqGdlD7u3Mc/edit"&gt;A-4&lt;/a&gt;, which you can hang on the toilet of your office. Probably something I will do when I‚Äôm back in the office üòÑ.  &lt;/p&gt;
&lt;h1&gt;Going down the rabbit hole&lt;/h1&gt;
&lt;p&gt;The last bullet-point of that article refers to a page on how to deal with &lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html#conflicts"&gt;conflicts&lt;/a&gt; during code reviews. Which is part of a wider set of &lt;a href="https://google.github.io/eng-practices/"&gt;guidelines&lt;/a&gt; around code reviews that Google produced. More reading, more &lt;strong&gt;learning&lt;/strong&gt; and something to share with the team.  &lt;/p&gt;
&lt;p&gt;Have a great weekend!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Software Development"></category><category term="Testing"></category><category term="What I Have Learned Today"></category></entry></feed>