<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PeetRonics' blog - Python</title><link href="http://peetronics.com/" rel="alternate"></link><link href="http://peetronics.com/feeds/python.xml" rel="self"></link><id>http://peetronics.com/</id><updated>2019-12-03T21:00:00+00:00</updated><subtitle>All can be true!</subtitle><entry><title>What I Have Learned Today - #029</title><link href="http://peetronics.com/WhatIHaveLearnedToday-029.html" rel="alternate"></link><published>2019-12-03T21:00:00+00:00</published><updated>2019-12-03T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-12-03:/WhatIHaveLearnedToday-029.html</id><summary type="html">&lt;p&gt;Things are a lot nicer when nicely packaged up&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Python Package logo" src="http://peetronics.com/images/python-package.png"&gt;  &lt;/p&gt;
&lt;p&gt;Today I &lt;strong&gt;learned&lt;/strong&gt; to make my first Python Package üòÅ.  &lt;/p&gt;
&lt;p&gt;We‚Äôve got an ever growing list of Python Projects within our company and we are no stranger to some copy-paste action of code snippets between these projects/repositories. Though there are cases where this is absolutely fine, most of the time this is bad practice.  &lt;/p&gt;
&lt;p&gt;One of the ways we‚Äôve tried to counteract that is by keeping as much as possible within one code-base. But that is becoming more and more of a problem (and also bad practice).  &lt;/p&gt;
&lt;p&gt;Knowing about 3rd party &lt;a href="https://pypi.org/"&gt;Python Packages&lt;/a&gt; (of course we use them a lot), I have wanted to craft of my own package for some time, as a solution for sharing generic modules between projects. I always thought it required a good dose of &lt;em&gt;black magic&lt;/em&gt;, but hey, never too late to &lt;strong&gt;learn&lt;/strong&gt; that üòà.  &lt;/p&gt;
&lt;p&gt;I followed this &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;tutorial&lt;/a&gt; from the Python Packaging Authority, and, surprise surprise, it was a lot easier than I thought!  &lt;/p&gt;
&lt;p&gt;For now I wouldn‚Äôt go as far as submitting the package to PyPi as it is purely for internal use. Which doesn‚Äôt mean I won‚Äôt do in (the foreseeable) future.  &lt;/p&gt;
&lt;p&gt;We do have an internal package manager called &lt;a href="https://inedo.com/proget"&gt;ProGet&lt;/a&gt;. But naive me thought this was only for¬†.Net. Turns out it supports local Python Packages. Who knew! &lt;strong&gt;Learned&lt;/strong&gt; that as well as an added bonus today üòÜ.  &lt;/p&gt;
&lt;p&gt;Pretty sure I will do some more packaging this month üòâ üéÑ  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #018</title><link href="http://peetronics.com/WhatIHaveLearnedToday-018.html" rel="alternate"></link><published>2019-11-22T21:00:00+00:00</published><updated>2019-11-22T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-22:/WhatIHaveLearnedToday-018.html</id><summary type="html">&lt;p&gt;Breaking the habit of using 'import *'&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="removestar page header" src="http://peetronics.com/images/removestar.png" width="80%"&gt;  &lt;/p&gt;
&lt;h1&gt;Good coding practices&lt;/h1&gt;
&lt;p&gt;I‚Äôm a strong believer of using good coding practices and will advocate for it wherever and whenever I can. Be it in &lt;em&gt;code reviews&lt;/em&gt;, &lt;em&gt;community of practice&lt;/em&gt; sessions, &lt;em&gt;mentoring&lt;/em&gt; etc.  &lt;/p&gt;
&lt;p&gt;It is commonly known in Python not to use &lt;code&gt;import *&lt;/code&gt;. If you want to know why, read &lt;a href="https://www.geeksforgeeks.org/why-import-star-in-python-is-a-bad-idea/"&gt;this&lt;/a&gt;. It makes me flinch every time I see the usage of that in Python code I lay my eyes on.  &lt;/p&gt;
&lt;h1&gt;RemoveStar&lt;/h1&gt;
&lt;p&gt;What‚Äôs out there in Python-land keeps amazing me. Today I &lt;strong&gt;learned&lt;/strong&gt; about a Python module called &lt;a href="https://www.asmeurer.com/removestar/"&gt;RemoveStar&lt;/a&gt;. It scans a file, directory or module, and points out usages of &lt;code&gt;import *&lt;/code&gt;. Or of you like, it will auto replace with proper imports.  &lt;/p&gt;
&lt;h1&gt;Who knew&lt;/h1&gt;
&lt;p&gt;Luckily all usages of &lt;code&gt;import *&lt;/code&gt; have been eradicated in our code bases; or so I thought‚Ä¶  &lt;/p&gt;
&lt;p&gt;I tried the &lt;em&gt;RemoveStar&lt;/em&gt; tool on one of our repositories. Lo and behold, 3 instances of &lt;code&gt;import *&lt;/code&gt; where found. For now, rather than refactoring the code, I will have a chat with the team what I found.  &lt;/p&gt;
&lt;p&gt;Have a good weekend!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #016</title><link href="http://peetronics.com/WhatIHaveLearnedToday-016.html" rel="alternate"></link><published>2019-11-20T21:00:00+00:00</published><updated>2019-11-20T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-20:/WhatIHaveLearnedToday-016.html</id><summary type="html">&lt;p&gt;Python debugging from the command line&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Python debugging with PDB" src="http://peetronics.com/images/python-debugging.jpg" width="80%"&gt;  &lt;/p&gt;
&lt;h1&gt;Lazy man‚Äôs debugging&lt;/h1&gt;
&lt;p&gt;Sure I‚Äôm not the only one out, but I‚Äôm still the kind of person that does debugging by dotting the code with &lt;code&gt;print()&lt;/code&gt; statements. And with the release of &lt;a href="https://docs.python.org/3/whatsnew/3.8.html"&gt;Python 3.8&lt;/a&gt; and the f-string support it seems that they want me to keep to stick to that habit:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eric_idle&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;member_since&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1975&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;=}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;member_since&lt;/span&gt;&lt;span class="si"&gt;=}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eric_idle&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;member_since&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1975&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That‚Äôs a nice addition.  &lt;/p&gt;
&lt;h1&gt;A better alternative&lt;/h1&gt;
&lt;p&gt;At my work I‚Äôm not making a secret of my approach to debugging and a colleague once pointed out the debug capabilities of the &lt;a href="https://www.jetbrains.com/pycharm/"&gt;IDE&lt;/a&gt;. Tried that but never caught on with me. So yes, I still have the ubiquitous print statements everywhere, which I always forget to remove.  &lt;/p&gt;
&lt;p&gt;Today I was joking about my debug super powers again and then another colleague pointed out &lt;a href="https://docs.python.org/3/library/pdb.html"&gt;PDB&lt;/a&gt;; a Python debugger that can be used from the command line. I found a handy &lt;a href="https://realpython.com/python-debugging-pdb/"&gt;tutorial&lt;/a&gt; from &lt;em&gt;Real Python&lt;/em&gt; which I followed which got me started.  &lt;/p&gt;
&lt;p&gt;Still a lot to &lt;strong&gt;learn&lt;/strong&gt; on this, but practice makes perfect. So I will stick with this. So far so good.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #014</title><link href="http://peetronics.com/WhatIHaveLearnedToday-014.html" rel="alternate"></link><published>2019-11-18T21:00:00+00:00</published><updated>2019-11-18T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-18:/WhatIHaveLearnedToday-014.html</id><summary type="html">&lt;p&gt;‚ÄúI see some Python code and want to paint it Black‚Äù&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Black logo" src="http://peetronics.com/images/black.png" width="80%"&gt;  &lt;/p&gt;
&lt;h1&gt;Podcasts to stay up-to-date&lt;/h1&gt;
&lt;p&gt;One of my favourite work-related podcasts is &lt;a href="https://pythonbytes.fm"&gt;PythonBytes&lt;/a&gt;. In each half-hour episode the hosts &lt;a href="https://twitter.com/mkennedy"&gt;@mkennedy&lt;/a&gt; and &lt;a href="https://twitter.com/brianokken"&gt;@brianokken&lt;/a&gt; give you the latest Python news. A great and easy way to stay up-to-date. Oh, and you‚Äôve got to love the jokes at the end of each episode üòÜ.  &lt;/p&gt;
&lt;p&gt;While listening to episode &lt;a href="https://pythonbytes.fm/episodes/show/156/all-the-programming-lols"&gt;#156&lt;/a&gt; this morning, I learned that one of the must-have Python modules, &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has got a new release&lt;/li&gt;
&lt;li&gt;Is probably moving out of Beta on‚Ä¶ Black Friday üòÉ&lt;/li&gt;
&lt;li&gt;Has an online &lt;a href="https://black.now.sh"&gt;playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Why automatic code formatting&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; advertises itself as ‚Äú&lt;em&gt;The Uncompromising Code Formatter for Python&lt;/em&gt;‚Äù. In short, it will deal with the code formatting automatically and it adheres to the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; style guide.  &lt;/p&gt;
&lt;p&gt;This means that, when applied on your project, you can concentrate on the code itself, without having to worry about the formatting and style. Automatic code formatting will ensure &lt;strong&gt;uniformity&lt;/strong&gt; of your code and it will make &lt;strong&gt;code reviews&lt;/strong&gt; a lot quicker and easier.  &lt;/p&gt;
&lt;p&gt;To make your life even easier, you can integrate it in a &lt;a href="https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/"&gt;pre-commit hook&lt;/a&gt;.  &lt;/p&gt;
&lt;h1&gt;Scepticism&lt;/h1&gt;
&lt;p&gt;When we first introduced &lt;em&gt;Black&lt;/em&gt; in our project, we were faced with scepticism from some team members. Getting responses like: ‚ÄúSure that cannot be working fine‚Äù, and ‚Äúa good coder should do his/her own formatting/styling‚Äù.  &lt;/p&gt;
&lt;p&gt;But we pushed through, and luckily &lt;em&gt;Black&lt;/em&gt; it is now widely adopted in the team. If only we would have known about the playground earlier, the adoption might have been a bit easier‚Ä¶  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #010</title><link href="http://peetronics.com/WhatIHaveLearnedToday-010.html" rel="alternate"></link><published>2019-11-14T21:00:00+00:00</published><updated>2019-11-14T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-14:/WhatIHaveLearnedToday-010.html</id><summary type="html">&lt;p&gt;Common pathname manipulations in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="code snippet" src="http://peetronics.com/images/realpath.png" width="80%"&gt; &lt;/p&gt;
&lt;p&gt;I was fed up with all the hard-coded paths in our code repository (Python). Thought there must be a better, more elegant way. And it appears there is.  &lt;/p&gt;
&lt;p&gt;Today I &lt;strong&gt;learned&lt;/strong&gt; about &lt;code&gt;os.path.realpath(path)&lt;/code&gt;. This function resolves the full path of the specified file or directory, based on the path from where your script is run. An example implementation:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;

&lt;span class="n"&gt;resource_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; C:\git_repos\01_Private_Projects\Python_snippets\output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently I‚Äôm going through our codebase and see where we can replace hard coded paths with the &lt;code&gt;os.path.realpath&lt;/code&gt; function. Neat! Full documentation on this function and the whole &lt;code&gt;os.path&lt;/code&gt; module can be found &lt;a href="https://docs.python.org/3/library/os.path.html"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus tip&lt;/strong&gt;: In the code snippet above you can see I only import &lt;code&gt;os.path&lt;/code&gt; and not the whole &lt;code&gt;os&lt;/code&gt; module. In Python is good practice only to import what you need. Import more can pollute the namespace and can cause confusion and conflicts. Never ever do &lt;code&gt;import * from blah&lt;/code&gt;¬†!!!  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It is worth solving bug-bears. In this example, code-base. Doing so will expand the knowledge of the thing you are working on/with.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #008</title><link href="http://peetronics.com/WhatIHaveLearnedToday-008.html" rel="alternate"></link><published>2019-11-12T21:00:00+00:00</published><updated>2019-11-12T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-12:/WhatIHaveLearnedToday-008.html</id><summary type="html">&lt;p&gt;The power of refactoring&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image of code snippet that is used in this article" src="http://peetronics.com/images/behave-context.png" width="80%"&gt;&lt;/p&gt;
&lt;h1&gt;Refactoring&lt;/h1&gt;
&lt;p&gt;I‚Äôm no stranger to code refactoring. It is a well adopted practice within our team. It has many benefits. Read &lt;a href="https://www.cuelogic.com/blog/what-is-refactoring-and-why-is-it-important"&gt;this blog post&lt;/a&gt; if you want to know why.  &lt;/p&gt;
&lt;p&gt;Some benefits not listed in the article above:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get a better understanding of your code-base&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn&lt;/strong&gt; about the coding practices your colleagues use&lt;/li&gt;
&lt;li&gt;Get to know about used frameworks, modules and packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that is what happened today; I &lt;strong&gt;learned&lt;/strong&gt; more about a framework we use. &lt;/p&gt;
&lt;h1&gt;Behave&lt;/h1&gt;
&lt;p&gt;In our Python test automation framework we use &lt;a href="https://behave.readthedocs.io/en/latest/index.html"&gt;Behave&lt;/a&gt;, a Behaviour Driven Development implementation in Python. It has a concept of &lt;a href="https://behave.readthedocs.io/en/latest/context_attributes.html"&gt;context&lt;/a&gt; as a way to pass around data. We do use &lt;em&gt;context&lt;/em&gt; in our framework but not to its fullest potential.  &lt;/p&gt;
&lt;p&gt;While working on an area of our code-base today, I noticed that the way we deal with (global) parameters is quite inconsistent and convoluted. Knowing about behave context I took the opportunity to read a bit more about the workings and see if this could be used as a replacement of global variables.  &lt;/p&gt;
&lt;p&gt;One hour later, I pushed a PR which gets rid of the messy variables implementation and replaces it with the more elegant context concept. See the following code snippet as a small example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;user_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_user_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userdata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="o"&gt;************************&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;************************&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allow_fail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;ALLOW_FAIL&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOW_FAIL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;APP_NAME&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APP_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;RESPONSE_TIMES&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;CONFIGURATION_FILE&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONFIGURATION_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dev_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;DEV_MODE&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEV_MODE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="What I Have Learned Today"></category><category term="Python"></category></entry></feed>