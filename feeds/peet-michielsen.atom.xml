<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PeetRonics' blog - Peet Michielsen</title><link href="http://peetronics.com/" rel="alternate"></link><link href="http://peetronics.com/feeds/peet-michielsen.atom.xml" rel="self"></link><id>http://peetronics.com/</id><updated>2019-11-24T21:00:00+00:00</updated><subtitle>All can be true!</subtitle><entry><title>What I Have Learned Today - #020</title><link href="http://peetronics.com/WhatIHaveLearnedToday-020.html" rel="alternate"></link><published>2019-11-24T21:00:00+00:00</published><updated>2019-11-24T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-24:/WhatIHaveLearnedToday-020.html</id><summary type="html">&lt;p&gt;The buzz you get from talking to strangers&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Actually the title should read ‚ÄùWhat I Have Learned Yesterday‚Äù. I had a long drive and wasn‚Äôt in the mood for writing.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Picture of the Oddfellows Arms in Sherburn in Elmet" src="http://peetronics.com/images/oddfellows.jpg" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Meeting new¬†people&lt;/h1&gt;
&lt;p&gt;It might be surprising but I find it hard to meet new people and start a conversation. I rather be me by myself than throwing myself into a conversation with strangers. but this weekend I learned to step beyond that‚Ä¶  &lt;/p&gt;
&lt;p&gt;Saturday night I had to stay over in a place I‚Äôve never been. Found myself some &lt;a href="https://oddfellowsarms.pub/"&gt;accommodation&lt;/a&gt;, and had planned to stay in my room and minding my own business.  &lt;/p&gt;
&lt;p&gt;But after a long drive I did fancy a beer so made my way to the pub and ordered one. Settled myself in a corner of an empty table, having my phone and pint as company.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pint glass" src="http://peetronics.com/images/pint.jpg" width="100%"&gt;  &lt;/p&gt;
&lt;p&gt;After a while some regulars came in and joined the table I was sitting at. First I was feeling a bit uncomfortable and wanted to get back to my room after finishing my pint. But after the few polite exchanges of ‚Äú&lt;em&gt;what brings you here&lt;/em&gt;‚Äù etc. a conversation started flowing. And it was good.  &lt;/p&gt;
&lt;p&gt;Before I knew it last orders were called and a final round of drinks were ordered. After that I retreated to my room and looked back at a wonderful night I had.  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It felt good to ‚Äú&lt;em&gt;get out of my shell&lt;/em&gt;‚Äù and strike up a conversation with strangers. Yes, I was anxious and felt uncomfortable at first but &lt;strong&gt;learned&lt;/strong&gt; that those feelings are unfounded. I did get a buzz out of it and I had an opportunity to hone my &lt;em&gt;social skills&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;Knowing that, in future I will more easily get into a conversation with people I don‚Äôt know; there‚Äôs nothing to loose. Though I know that there still will be a bit of anxiousness. But nothing that cannot be cured with a bit of Dutch Courage‚Ä¶  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="What I Have Learned Today"></category><category term="Strangers"></category><category term="Conversations"></category><category term="Comfort Zone"></category></entry><entry><title>What I Have Learned Today - #019</title><link href="http://peetronics.com/WhatIHaveLearnedToday-019.html" rel="alternate"></link><published>2019-11-23T21:00:00+00:00</published><updated>2019-11-23T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-23:/WhatIHaveLearnedToday-019.html</id><summary type="html">&lt;p&gt;The importance of code reviews&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="github code review example" src="http://peetronics.com/images/code-review.png" width="100%"&gt;  &lt;/p&gt;
&lt;h1&gt;The importance of code¬†reviews&lt;/h1&gt;
&lt;p&gt;Code reviews are one of many important mechanisms (or rituals if you like) to ensure &lt;em&gt;quality&lt;/em&gt; of your software project/product. Potential bugs can be caught early as well as negative performance / security implications.  &lt;/p&gt;
&lt;p&gt;What I find though, what is not mentioned enough, is that code reviews are also a great vehicle for knowledge transfer. By participating as a reviewer you can &lt;strong&gt;learn&lt;/strong&gt; a lot.  &lt;/p&gt;
&lt;p&gt;That‚Äôs why I make an effort to get involved in code reviews as much as possible.  &lt;/p&gt;
&lt;h1&gt;Respectful Reviews&lt;/h1&gt;
&lt;p&gt;While enjoying my morning cup of coffee and reading through blog posts, I came across this &lt;a href="https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html"&gt;article&lt;/a&gt; from the &lt;a href="https://testing.googleblog.com/"&gt;Google Testing Blog&lt;/a&gt;. It is list of &lt;em&gt;do‚Äôs&lt;/em&gt; and &lt;em&gt;don‚Äôts&lt;/em&gt; for code reviews, aimed both at authors and reviewers. A quick read and very helpful tips to make reviews better.  &lt;/p&gt;
&lt;p&gt;As an added bonus the article can be printed on one &lt;a href="https://docs.google.com/document/d/1_Gljf1TMTV2WPsiXCdk8oIkiq6uiajN_IqGdlD7u3Mc/edit"&gt;A-4&lt;/a&gt;, which you can hang on the toilet of your office. Probably something I will do when I‚Äôm back in the office üòÑ.  &lt;/p&gt;
&lt;h1&gt;Going down the rabbit¬†hole&lt;/h1&gt;
&lt;p&gt;The last bullet-point of that article refers to a page on how to deal with &lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html#conflicts"&gt;conflicts&lt;/a&gt; during code reviews. Which is part of a wider set of &lt;a href="https://google.github.io/eng-practices/"&gt;guidelines&lt;/a&gt; around code reviews that Google produced. More reading, more &lt;strong&gt;learning&lt;/strong&gt; and something to share with the team.  &lt;/p&gt;
&lt;p&gt;Have a great weekend!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Software Development"></category><category term="Code Review"></category><category term="Testing"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #018</title><link href="http://peetronics.com/WhatIHaveLearnedToday-018.html" rel="alternate"></link><published>2019-11-22T21:00:00+00:00</published><updated>2019-11-22T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-22:/WhatIHaveLearnedToday-018.html</id><summary type="html">&lt;p&gt;Breaking the habit of using 'import *'&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="removestar page header" src="http://peetronics.com/images/removestar.png" width="100%"&gt;  &lt;/p&gt;
&lt;h1&gt;Good coding practices&lt;/h1&gt;
&lt;p&gt;I‚Äôm a strong believer of using good coding practices and will advocate for it wherever and whenever I can. Be it in &lt;em&gt;code reviews&lt;/em&gt;, &lt;em&gt;community of practice&lt;/em&gt; sessions, &lt;em&gt;mentoring&lt;/em&gt; etc.  &lt;/p&gt;
&lt;p&gt;It is commonly known in Python not to use &lt;code&gt;import *&lt;/code&gt;. If you want to know why, read &lt;a href="https://www.geeksforgeeks.org/why-import-star-in-python-is-a-bad-idea/"&gt;this&lt;/a&gt;. It makes me flinch every time I see the usage of that in Python code I lay my eyes on.  &lt;/p&gt;
&lt;h1&gt;RemoveStar&lt;/h1&gt;
&lt;p&gt;What‚Äôs out there in Python-land keeps amazing me. Today I &lt;strong&gt;learned&lt;/strong&gt; about a Python module called &lt;a href="https://www.asmeurer.com/removestar/"&gt;RemoveStar&lt;/a&gt;. It scans a file, directory or module, and points out usages of &lt;code&gt;import *&lt;/code&gt;. Or of you like, it will auto replace with proper imports.  &lt;/p&gt;
&lt;h1&gt;Who knew&lt;/h1&gt;
&lt;p&gt;Luckily all usages of &lt;code&gt;import *&lt;/code&gt; have been eradicated in our code bases; or so I thought‚Ä¶  &lt;/p&gt;
&lt;p&gt;I tried the &lt;em&gt;RemoveStar&lt;/em&gt; tool on one of our repositories. Lo and behold, 3 instances of &lt;code&gt;import *&lt;/code&gt; where found. For now, rather than refactoring the code, I will have a chat with the team what I found.  &lt;/p&gt;
&lt;p&gt;Have a good weekend!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="Good Coding Practices"></category><category term="What I Have Learned Today"></category><category term="Remove Star"></category></entry><entry><title>What I Have Learned Today - #017</title><link href="http://peetronics.com/WhatIHaveLearnedToday-017.html" rel="alternate"></link><published>2019-11-21T21:00:00+00:00</published><updated>2019-11-21T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-21:/WhatIHaveLearnedToday-017.html</id><summary type="html">&lt;p&gt;Making your life easier with NFC tags&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="desk with various nfc tags" src="http://peetronics.com/images/nfc-tags.jpg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Having a smart-phone with a built-in &lt;a href="https://en.wikipedia.org/wiki/Near-field_communication"&gt;Near Field Communication reader&lt;/a&gt; (NFC) I wanted to try to expand its usage beyond the handy tap-and-pay. Recently I read an article on handy &lt;a href="https://techwiser.com/cool-uses-for-nfc-tags/"&gt;usages&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I ordered a few NFC stickers and badges which arrived today. Found an &lt;a href="https://play.google.com/store/apps/details?id=com.wakdev.nfctools.pro"&gt;app&lt;/a&gt; to read-write tags. I managed to create a few badges that, when swiped:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switches on Bluetooth and open my podcast app (stuck it on my ear-bud case)&lt;/li&gt;
&lt;li&gt;Sets an alarm and put phone in do-not-disturb mode (will have it on my bedside table) &lt;/li&gt;
&lt;li&gt;Switches on Bluetooth and open Google maps (will stick it on my car dashboard)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only having &lt;strong&gt;learned&lt;/strong&gt; some basic usages, I think there are plenty more ways these tags can come in handy.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Android"></category><category term="NFC Tags"></category><category term="Lifehacker"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #016</title><link href="http://peetronics.com/WhatIHaveLearnedToday-016.html" rel="alternate"></link><published>2019-11-20T21:00:00+00:00</published><updated>2019-11-20T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-20:/WhatIHaveLearnedToday-016.html</id><summary type="html">&lt;p&gt;Python debugging from the command line&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Python debugging with PDB" src="http://peetronics.com/images/python-debugging.jpg" width="100%"&gt;  &lt;/p&gt;
&lt;h1&gt;Lazy man‚Äôs debugging&lt;/h1&gt;
&lt;p&gt;Sure I‚Äôm not the only one out, but I‚Äôm still the kind of person that does debugging by dotting the code with &lt;code&gt;print()&lt;/code&gt; statements. And with the release of &lt;a href="https://docs.python.org/3/whatsnew/3.8.html"&gt;Python 3.8&lt;/a&gt; and the f-string support it seems that they want me to keep to stick to that habit:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eric_idle&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;member_since&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1975&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{user=} {member_since=}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eric_idle&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;member_since&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1975&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That‚Äôs a nice addition.  &lt;/p&gt;
&lt;h1&gt;A better alternative&lt;/h1&gt;
&lt;p&gt;At my work I‚Äôm not making a secret of my approach to debugging and a colleague once pointed out the debug capabilities of the &lt;a href="https://www.jetbrains.com/pycharm/"&gt;IDE&lt;/a&gt;. Tried that but never caught on with me. So yes, I still have the ubiquitous print statements everywhere, which I always forget to remove.  &lt;/p&gt;
&lt;p&gt;Today I was joking about my debug super powers again and then another colleague pointed out &lt;a href="https://docs.python.org/3/library/pdb.html"&gt;PDB&lt;/a&gt;; a Python debugger that can be used from the command line. I found a handy &lt;a href="https://realpython.com/python-debugging-pdb/"&gt;tutorial&lt;/a&gt; from &lt;em&gt;Real Python&lt;/em&gt; which I followed which got me started.  &lt;/p&gt;
&lt;p&gt;Still a lot to &lt;strong&gt;learn&lt;/strong&gt; on this, but practice makes perfect. So I will stick with this. So far so good.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Debugging"></category><category term="Python"></category><category term="What I Have Learned Today"></category><category term="Command Line"></category></entry><entry><title>What I Have Learned Today - #015</title><link href="http://peetronics.com/WhatIHaveLearnedToday-015.html" rel="alternate"></link><published>2019-11-19T21:00:00+00:00</published><updated>2019-11-19T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-19:/WhatIHaveLearnedToday-015.html</id><summary type="html">&lt;p&gt;Remark‚Ää‚Äî‚Ääa lightweight slideshow tool&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Remark" src="http://peetronics.com/images/remark.png"&gt;  &lt;/p&gt;
&lt;p&gt;This morning I was preparing a presentation. Being fed up with the bulkiness of MS PowerPoint I was wanting to have lighter alternative. Having seen other people using similar products, I did find a presentation tool called &lt;a href="https://github.com/gnab/remark"&gt;Remark&lt;/a&gt;, a slideshow based on JavaScript that can run in a browser.  &lt;/p&gt;
&lt;p&gt;I had a play with it (bit of a &lt;strong&gt;learning&lt;/strong&gt; curve), and initial thoughts on it are positive. What I like about it:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;. You only need a few files downloaded without any installation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt;. You can specify a whole presentation from a text editor&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presenter mode&lt;/strong&gt;. With built in timer and the speaker notes coming from the same markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The examples on their &lt;a href="https://github.com/gnab/remark"&gt;project page&lt;/a&gt; are great to get you started but I already made a few &lt;em&gt;improvements&lt;/em&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put the markdown in in a separate file&lt;/li&gt;
&lt;li&gt;Using a local copy of the CSS&lt;/li&gt;
&lt;li&gt;Using a local copy of &lt;code&gt;remark.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me this works better as you don‚Äôt need an internet connection and it allows for easier editing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HTML example. code snippet in article text" src="http://peetronics.com/images/remark-example.png" width="100%"&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Conference feedback, presentation, remark&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Conference Feedback&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Conference feedback&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../assets/presentation-stylesheet.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../assets/remark.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;slideshow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;remark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="nx"&gt;sourceUrl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./Conference-Feedback.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;ratio&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4:3&amp;#39;&lt;/span&gt;   &lt;span class="p"&gt;});&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Productivity"></category><category term="Slideshow"></category><category term="Markdown"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #014</title><link href="http://peetronics.com/WhatIHaveLearnedToday-014.html" rel="alternate"></link><published>2019-11-18T21:00:00+00:00</published><updated>2019-11-18T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-18:/WhatIHaveLearnedToday-014.html</id><summary type="html">&lt;p&gt;‚ÄúI see some Python code and want to paint it Black‚Äù&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Black logo" src="http://peetronics.com/images/black.png" width="100%"&gt;  &lt;/p&gt;
&lt;h1&gt;Podcasts to stay up-to-date&lt;/h1&gt;
&lt;p&gt;One of my favourite work-related podcasts is &lt;a href="https://pythonbytes.fm"&gt;PythonBytes&lt;/a&gt;. In each half-hour episode the hosts &lt;a href="https://twitter.com/mkennedy"&gt;@mkennedy&lt;/a&gt; and &lt;a href="https://twitter.com/brianokken"&gt;@brianokken&lt;/a&gt; give you the latest Python news. A great and easy way to stay up-to-date. Oh, and you‚Äôve got to love the jokes at the end of each episode üòÜ.  &lt;/p&gt;
&lt;p&gt;While listening to episode &lt;a href="https://pythonbytes.fm/episodes/show/156/all-the-programming-lols"&gt;#156&lt;/a&gt; this morning, I learned that one of the must-have Python modules, &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt;:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has got a new release&lt;/li&gt;
&lt;li&gt;Is probably moving out of Beta on‚Ä¶ Black Friday üòÉ&lt;/li&gt;
&lt;li&gt;Has an online &lt;a href="https://black.now.sh"&gt;playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Why automatic code formatting&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; advertises itself as ‚Äú&lt;em&gt;The Uncompromising Code Formatter for Python&lt;/em&gt;‚Äù. In short, it will deal with the code formatting automatically and it adheres to the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; style guide.  &lt;/p&gt;
&lt;p&gt;This means that, when applied on your project, you can concentrate on the code itself, without having to worry about the formatting and style. Automatic code formatting will ensure &lt;strong&gt;uniformity&lt;/strong&gt; of your code and it will make &lt;strong&gt;code reviews&lt;/strong&gt; a lot quicker and easier.  &lt;/p&gt;
&lt;p&gt;To make your life even easier, you can integrate it in a &lt;a href="https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/"&gt;pre-commit hook&lt;/a&gt;.  &lt;/p&gt;
&lt;h1&gt;Scepticism&lt;/h1&gt;
&lt;p&gt;When we first introduced &lt;em&gt;Black&lt;/em&gt; in our project, we were faced with scepticism from some team members. Getting responses like: ‚ÄúSure that cannot be working fine‚Äù, and ‚Äúa good coder should do his/her own formatting/styling‚Äù.  &lt;/p&gt;
&lt;p&gt;But we pushed through, and luckily &lt;em&gt;Black&lt;/em&gt; it is now widely adopted in the team. If only we would have known about the playground earlier, the adoption might have been a bit easier‚Ä¶  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Programming"></category><category term="Code Formatting"></category><category term="Black"></category><category term="Python"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #013</title><link href="http://peetronics.com/WhatIHaveLearnedToday-013.html" rel="alternate"></link><published>2019-11-17T21:00:00+00:00</published><updated>2019-11-17T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-17:/WhatIHaveLearnedToday-013.html</id><summary type="html">&lt;p&gt;Honing your skills by play&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Image of the card game Set" src="http://peetronics.com/images/set.jpg" width="100%"&gt;  &lt;/p&gt;
&lt;h1&gt;Play&lt;/h1&gt;
&lt;p&gt;It is well known that playing board- and card-games has got numerous benefits. Plenty of &lt;a href="https://www.dumblittleman.com/benefits-of-playing-board-games/"&gt;articles&lt;/a&gt; have been written about it so I will refrain from re-iterating. Part from all the mentioned benefits, for me probably the biggest one is that it is fun üòÑ. So it‚Äôs no secret I‚Äôm always up for a game of any sort.  &lt;/p&gt;
&lt;h1&gt;Set&lt;/h1&gt;
&lt;p&gt;A card game I particularly like is &lt;a href="https://en.wikipedia.org/wiki/Set_(card_game)"&gt;Set&lt;/a&gt;. Simple in concept, yet very gripping. Simplest explanation is to find three cards that are completely similar or opposite in shape, filling, colour or number (follow the link for full rules).The player that sees the similarities / opposites first gets the cards. Most cards wins.I believe that particularly this is a game that sits close to my profession as software tester, in which looking for patterns, similarities, opposites is a key part of your job.  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So yes, even on a lazy Sunday while playing games, I‚Äôm learning to hone my professional skills‚Ä¶Have fun!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Board Games"></category><category term="Testing"></category><category term="Skills"></category><category term="Set"></category></entry><entry><title>What I Have Learned Today - #012</title><link href="http://peetronics.com/WhatIHaveLearnedToday-012.html" rel="alternate"></link><published>2019-11-16T21:00:00+00:00</published><updated>2019-11-16T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-16:/WhatIHaveLearnedToday-012.html</id><summary type="html">&lt;p&gt;Dealing with distraction&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Photo of an Apple IWatch, showing the fitness tracker screen" src="http://peetronics.com/images/fitness-tracker.jpg" width="100%"&gt;  &lt;/p&gt;
&lt;h1&gt;Distraction&lt;/h1&gt;
&lt;p&gt;One of the things that I constantly try to get better at is not getting distracted. Yes, I can get easily distracted. Not in a worrying sense but still.  &lt;/p&gt;
&lt;p&gt;For example, if I‚Äôm in a room where there is a television playing while having a conversation with somebody, sooner or later I will start looking at the moving images on screen. Nothing to worry about, but still not very polite for the person I‚Äôm having a chat with.  &lt;/p&gt;
&lt;p&gt;Luckily I‚Äôm well aware of my flaw, Which means I can put mechanisms in place to improve. In the example of the playing television, if possible I try to sit with my back to the screen.  &lt;/p&gt;
&lt;h1&gt;Productivity killer&lt;/h1&gt;
&lt;p&gt;Distraction can be a productivity killer. In my case it is not too bad, but yet I want to be as productive as possible. Needless to say that in my work I want to remove distraction triggers as much as I can. One of the biggest ones for me are &lt;em&gt;notifications&lt;/em&gt;. Think Outlook, Skype, Slack, all the social medias; that kind of stuff. If not strictly needed I will switch off notifications completely, or at least go into the settings of any app and tweak the notification settings to my liking. Of course¬†, these ones below always get a &lt;strong&gt;block&lt;/strong&gt; from me:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Facebook wants to show notifications: allow / block" src="http://peetronics.com/images/desktop-notifications.png"&gt;  &lt;/p&gt;
&lt;h1&gt;Distracted by your¬†wrist&lt;/h1&gt;
&lt;p&gt;Having a smart-watch is not good in relation to distraction. Sure, once I got myself one it was great to be able to get notified on your watch, without having to look at your phone. But I have switched that off for a while now and it has been a blessing.Today, in my continuous effort to cut distractions I‚Äôve now switched off the last bit of attention-grabbing from my wrist; the &lt;em&gt;fitness tracking&lt;/em&gt;. So no more stand reminders 10 minutes to the hour while I‚Äôm in full flow of coding. No more ‚Äú&lt;em&gt;you still need to burn xx calories to reach your daily goal&lt;/em&gt;‚Äù while I‚Äôm driving.  &lt;/p&gt;
&lt;p&gt;Lets see how it goes. Probably I won‚Äôt miss it a bit!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Apple Watch"></category><category term="Distraction"></category><category term="Productivity"></category><category term="What I Have Learned Today"></category><category term="Notifications"></category></entry><entry><title>What I Have Learned Today - #011</title><link href="http://peetronics.com/WhatIHaveLearnedToday-011.html" rel="alternate"></link><published>2019-11-15T21:00:00+00:00</published><updated>2019-11-15T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-15:/WhatIHaveLearnedToday-011.html</id><summary type="html">&lt;p&gt;Test before push&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick one today&lt;br&gt;
I did a code refactor &lt;a href="https://link.medium.com/aTaHR1UCy1"&gt;3 days ago&lt;/a&gt;. Today I &lt;strong&gt;learnt&lt;/strong&gt; the importance of testing before pushing your code changes.  &lt;/p&gt;
&lt;p&gt;Because of the refactoring, a portion of the nightly regression tests misbehaved. And I only realised today üò¶. Of course I did test the few scenarios before committing the changes; yet‚Ä¶ I didn‚Äôt cater for all possible paths. Luckily a fix was readily available.  &lt;/p&gt;
&lt;p&gt;So next time I do a refactor, I need to remember to test, test, and‚Ä¶ TEST!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Software Development"></category><category term="What I Have Learned Today"></category><category term="Testing"></category><category term="Mistakes"></category></entry><entry><title>What I Have Learned Today - #010</title><link href="http://peetronics.com/WhatIHaveLearnedToday-010.html" rel="alternate"></link><published>2019-11-14T21:00:00+00:00</published><updated>2019-11-14T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-14:/WhatIHaveLearnedToday-010.html</id><summary type="html">&lt;p&gt;Common pathname manipulations in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="code snippet" src="http://peetronics.com/images/realpath.png" width="100%"&gt; &lt;/p&gt;
&lt;p&gt;I was fed up with all the hard-coded paths in our code repository (Python). Thought there must be a better, more elegant way. And it appears there is.  &lt;/p&gt;
&lt;p&gt;Today I &lt;strong&gt;learned&lt;/strong&gt; about &lt;code&gt;os.path.realpath(path)&lt;/code&gt;. This function resolves the full path of the specified file or directory, based on the path from where your script is run. An example implementation:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;

&lt;span class="n"&gt;resource_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; C:\git_repos\01_Private_Projects\Python_snippets\output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently I‚Äôm going through our codebase and see where we can replace hard coded paths with the &lt;code&gt;os.path.realpath&lt;/code&gt; function. Neat! Full documentation on this function and the whole &lt;code&gt;os.path&lt;/code&gt; module can be found &lt;a href="https://docs.python.org/3/library/os.path.html"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus tip&lt;/strong&gt;: In the code snippet above you can see I only import &lt;code&gt;os.path&lt;/code&gt; and not the whole &lt;code&gt;os&lt;/code&gt; module. In Python is good practice only to import what you need. Import more can pollute the namespace and can cause confusion and conflicts. Never ever do &lt;code&gt;import * from blah&lt;/code&gt;¬†!!!  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It is worth solving bug-bears. In this example, code-base. Doing so will expand the knowledge of the thing you are working on/with.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Python"></category><category term="Pathname Manipulations"></category><category term="What I Have Learned Today"></category><category term="Bugbears"></category></entry><entry><title>What I Have Learned Today - #009</title><link href="http://peetronics.com/WhatIHaveLearnedToday-009.html" rel="alternate"></link><published>2019-11-13T21:00:00+00:00</published><updated>2019-11-13T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-13:/WhatIHaveLearnedToday-009.html</id><summary type="html">&lt;p&gt;Reviewing abstracts for talks‚Ää‚Äî‚Äälearn from others&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="review testbash abstracts" src="http://peetronics.com/images/review-testbash-abstracts.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Reviewing abstracts&lt;/h1&gt;
&lt;p&gt;In the past I have tweeted about the benefits of reviewing abstracts for talks. In this case the ones for upcoming &lt;em&gt;TestBashes&lt;/em&gt; from the &lt;em&gt;Ministry of Testing&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/peetronics/status/1108145209269993474"&gt;Tweet of peetronics/1108145209269993474&lt;/a&gt;&lt;/blockquote&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It provides valuable feedback for the applicants&lt;/li&gt;
&lt;li&gt;It is an easy way to give back to the (testing) community&lt;/li&gt;
&lt;li&gt;It gives you a sneak peek into what is current in the field of testing&lt;/li&gt;
&lt;li&gt;It gives you ideas for submitting your own abstracts (if you‚Äôve got the ambition into public speaking)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all lots of opportunities to &lt;strong&gt;learn&lt;/strong&gt;. I encourage everyone to get involved in this. Follow &lt;a href="https://www.ministryoftesting.com/testbash/review"&gt;this link&lt;/a&gt;.  &lt;/p&gt;
&lt;h1&gt;Reviewing and writing¬†feedback&lt;/h1&gt;
&lt;p&gt;I tend to do this activity on a regular basis; once or twice a month, like tonight. I had some time set aside to go through a batch of abstracts. Finished quicker than I thought as after 6 or so proposals there were no more left for me to review üòÖ.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="message: There are no proposals to review at this time" src="http://peetronics.com/images/no-reviews.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;That aside, I want to focus on what I &lt;strong&gt;learn&lt;/strong&gt; from these kind of exercises. As well as the benefits laid out in the aforementioned bullet-points, doing an activity like this will sharpen your skills like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Critically reading&lt;/strong&gt; a piece of text. Sometimes you grasp an abstract in a first read, but often it needs to be read two or more times to get an understanding of the applicant‚Äôs intent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making a judgement&lt;/strong&gt; based on what you‚Äôve read. Once the proposal is understood, an assessment needs to be made, using predefined criteria (like: context, relevance, originality etc.).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formulating constructive feedback&lt;/strong&gt;. And when the assessment is made, this needs to be relayed back to the organisation and author. And especially this is an area where I continue to learn. It‚Äôs harder than you think to write something that can be used by the recipient as input to improve upon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy learning!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Public Speaking"></category><category term="What I Have Learned Today"></category><category term="Ministry Of Testing"></category><category term="Abstract Review"></category><category term="Skills"></category></entry><entry><title>What I Have Learned Today - #008</title><link href="http://peetronics.com/WhatIHaveLearnedToday-008.html" rel="alternate"></link><published>2019-11-12T21:00:00+00:00</published><updated>2019-11-12T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-12:/WhatIHaveLearnedToday-008.html</id><summary type="html">&lt;p&gt;The power of refactoring&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image of code snippet that is used in this article" src="http://peetronics.com/images/behave-context.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Refactoring&lt;/h1&gt;
&lt;p&gt;I‚Äôm no stranger to code refactoring. It is a well adopted practice within our team. It has many benefits. Read &lt;a href="https://www.cuelogic.com/blog/what-is-refactoring-and-why-is-it-important"&gt;this blog post&lt;/a&gt; if you want to know why.  &lt;/p&gt;
&lt;p&gt;Some benefits not listed in the article above:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get a better understanding of your code-base&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn&lt;/strong&gt; about the coding practices your colleagues use&lt;/li&gt;
&lt;li&gt;Get to know about used frameworks, modules and packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that is what happened today; I &lt;strong&gt;learned&lt;/strong&gt; more about a framework we use. &lt;/p&gt;
&lt;h1&gt;Behave&lt;/h1&gt;
&lt;p&gt;In our Python test automation framework we use &lt;a href="https://behave.readthedocs.io/en/latest/index.html"&gt;Behave&lt;/a&gt;, a Behaviour Driven Development implementation in Python. It has a concept of &lt;a href="https://behave.readthedocs.io/en/latest/context_attributes.html"&gt;context&lt;/a&gt; as a way to pass around data. We do use &lt;em&gt;context&lt;/em&gt; in our framework but not to its fullest potential.  &lt;/p&gt;
&lt;p&gt;While working on an area of our code-base today, I noticed that the way we deal with (global) parameters is quite inconsistent and convoluted. Knowing about behave context I took the opportunity to read a bit more about the workings and see if this could be used as a replacement of global variables.  &lt;/p&gt;
&lt;p&gt;One hour later, I pushed a PR which gets rid of the messy variables implementation and replaces it with the more elegant context concept. See the following code snippet as a small example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_user_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userdata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="o"&gt;************************&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;************************&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allow_fail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;ALLOW_FAIL&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ALLOW_FAIL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;APP_NAME&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APP_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;RESPONSE_TIMES&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TIMES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;CONFIGURATION_FILE&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONFIGURATION_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dev_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_data_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;DEV_MODE&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEV_MODE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="What I Have Learned Today"></category><category term="Python"></category><category term="Behave"></category><category term="Refactoring"></category></entry><entry><title>What I Have Learned Today - #007</title><link href="http://peetronics.com/WhatIHaveLearnedToday-007.html" rel="alternate"></link><published>2019-11-11T21:00:00+00:00</published><updated>2019-11-11T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-11:/WhatIHaveLearnedToday-007.html</id><summary type="html">&lt;p&gt;How Much is 12,000 satellites?&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="3,600 dots representing the number of seconds in a hour" src="http://peetronics.com/images/seconds-in-an-hour.png"&gt;&lt;/p&gt;
&lt;h1&gt;How Much is 12,000 satellites?&lt;/h1&gt;
&lt;p&gt;What I have &lt;strong&gt;learned&lt;/strong&gt; today was triggered by a Slack message. Somebody posted about &lt;a href="https://www.mynews13.com/fl/orlando/news/2019/11/09/spacex-launch-starlink-satellites-falcon-9-rocket"&gt;The Spacex launch today&lt;/a&gt; that will bring 60 Starlink satellites into orbit with the earth. These 60 are part of a plan to bring a total nearly 12,000 of these satellites into space. So the question was asked how this would even look like. Which got my brain working on ways to comprehend large numbers‚Ä¶  &lt;/p&gt;
&lt;h1&gt;Mechanisms to comprehend large¬†numbers&lt;/h1&gt;
&lt;p&gt;I‚Äôve come across several ways to try to get a grasp on big numbers. One of the easiest ones is to &lt;strong&gt;visualise&lt;/strong&gt;. &lt;a href="https://waitbutwhy.com/2014/11/from-1-to-1000000.html"&gt;This article&lt;/a&gt; simply represents numbers with dots. For example, the following dots represent the number of living languages in the world:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="6,500 representing the living languages in the world (2,000 with under 1,000 speakers)" src="http://peetronics.com/images/languages-541x600.png"&gt;&lt;/p&gt;
&lt;p&gt;And &lt;a href="https://lime.link/blog/visualizing-crowd-sizes/"&gt;this link&lt;/a&gt; gives a nice visual overview of different crowd sizes (&lt;em&gt;note that I came across this website by reading another blog post last Saturday but can‚Äôt find it anymore&lt;/em&gt;). 10,000 people (closest I could find to 12,000 satellites):  &lt;/p&gt;
&lt;p&gt;&lt;img alt="10,000 in a sports arena watching tennis" src="http://peetronics.com/images/10000.jpeg" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Book cover of Humble Pi, by Matt Parker" src="http://peetronics.com/images/humble-pi.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Another way to comprehend is to &lt;strong&gt;transform&lt;/strong&gt; a number into something else. I picked this up when I read &lt;a href="https://www.amazon.co.uk/Humble-Pi-Comedy-Maths-Errors/dp/0241360234"&gt;Humble Pi, by Matt Parker&lt;/a&gt;. He was once asked in an interview how big ¬£1 trillion of debt is. Just simply saying ‚Äúit is really big‚Äù doesn‚Äôt work. So as an example he transformed it into seconds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;million&lt;/strong&gt; seconds translates to &lt;strong&gt;11 days&lt;/strong&gt; and 14 hours&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;billion&lt;/strong&gt; seconds is over &lt;strong&gt;31 years&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;trillion&lt;/strong&gt; seconds is well after the year &lt;strong&gt;33,700ce&lt;/strong&gt;(!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another example of transformation is done in the following video, where the history of the universe is compared with a row of dominoes. Out of 13,799 dominoes, spanning from the big bang to now, only the last 3 represents where human life takes shape. Let that sink in for a moment‚Ä¶  &lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/ObngtuPFI8A'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So, next time when you see a big number, or have to imagine what an x amount of y looks like, try to &lt;strong&gt;visualise&lt;/strong&gt; or &lt;strong&gt;transform&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;Just after I posted this, Lifehacker released an &lt;a href="https://lifehacker.com/use-wolfram-alpha-to-conceptualize-giant-numbers-1839775534"&gt;article&lt;/a&gt; completely in line with the above. They point out you can use Wolfram Alpha to help you conceptualise large numbers. Thanks for the tip üòÑ  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Numbers"></category><category term="Visualise"></category><category term="Transform"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #006</title><link href="http://peetronics.com/WhatIHaveLearnedToday-006.html" rel="alternate"></link><published>2019-11-10T21:00:00+00:00</published><updated>2019-11-10T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-10:/WhatIHaveLearnedToday-006.html</id><summary type="html">&lt;p&gt;I tried a new recipe&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="picture of Mediterranean fish parcels" src="http://peetronics.com/images/fish-parcel.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;Cooking&lt;/h1&gt;
&lt;p&gt;Another thing I like to do in the weekend is trying out new recipes. Cooking for me is a great way to get your mind away from all the hustle and bustle of work.  &lt;/p&gt;
&lt;p&gt;I don‚Äôt consider myself a culinary wizard, but I can put a decent tasty meal on the table. I haven‚Äôt got enough confidence in the kitchen to cook completely &lt;em&gt;recipe-free&lt;/em&gt;. Rather give me the instructions which I will then follow step by step. Once I made a recipe a few times, I might venture in changing things up a bit.  &lt;/p&gt;
&lt;p&gt;What I want to highlight here is that cooking also is an opportunity to learn. Learning about flavours, learning about timing, learning about kitchen-skills.  &lt;/p&gt;
&lt;p&gt;I feel strongly about learning things not directly related to your work as I believe it helps to keep a balance. And cooking for me is a great way for doing that.  &lt;/p&gt;
&lt;h1&gt;Today‚Äôs meal&lt;/h1&gt;
&lt;p&gt;My partner and I try to have a balanced diet. One of the things that can‚Äôt be missed from that is fish, which we eat at least once a week. And that is what was on the menu today. I found a recipe for &lt;a href="https://www.bbcgoodfood.com/recipes/2383/mediterranean-fish-parcels-"&gt;Mediterranean fish parcels&lt;/a&gt;. Locked myself up in the kitchen, music on, poured a drink and cooked this tasty meal. Enjoy!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Food"></category><category term="What I Have Learned Today"></category><category term="Work Life Balance"></category><category term="Cooking Skils"></category></entry><entry><title>What I Have Learned Today - #005</title><link href="http://peetronics.com/WhatIHaveLearnedToday-005.html" rel="alternate"></link><published>2019-11-09T21:00:00+00:00</published><updated>2019-11-09T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-09:/WhatIHaveLearnedToday-005.html</id><summary type="html">&lt;p&gt;Using custom searches in the browser bar&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Weekend learning&lt;/h1&gt;
&lt;p&gt;Although it is the weekend, it doesn‚Äôt mean you stop learning. I‚Äôve set myself the challenge to blog every day for a month about a thing I have learned and Saturdays and Sundays are no exceptions on that.  &lt;/p&gt;
&lt;p&gt;One of the &lt;em&gt;rituals&lt;/em&gt; I have in the weekend is to catch up on the list of saved websites I‚Äôve aggregated over the week. These come from various sources, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSS feeds I follow&lt;/li&gt;
&lt;li&gt;Podcasts I listen to&lt;/li&gt;
&lt;li&gt;Something mentioned by a friend or colleague&lt;/li&gt;
&lt;li&gt;What I come across on social media&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The app I use for that is &lt;a href="https://app.getpocket.com/"&gt;Pocket&lt;/a&gt;. It has got a browser extension for Chrome and when installed on your phone, you can share links to it from other apps.  &lt;/p&gt;
&lt;p&gt;A lot of the collected links are things to read, which I try to do and then delete the link, or file it away if I want to go back to it in future.  &lt;/p&gt;
&lt;p&gt;Other things I tend to collect are mentions of software, Python packages and similar. These quite often involve downloading them and have a play with it. Resulting in either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nah, not for me, delete&lt;/li&gt;
&lt;li&gt;This might come in handy for a future project, file away for later&lt;/li&gt;
&lt;li&gt;Wow this is awesome, keep using it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing I learned today falls in the latter category.&lt;/p&gt;
&lt;h1&gt;Enhanced custom searches in the browser¬†bar&lt;/h1&gt;
&lt;p&gt;I already use custom searches in the browser bar. It is a quick way to search specific sites. For example, with typing &lt;code&gt;wiki &amp;lt;space&amp;gt;&lt;/code&gt; in the search bar, followed by a search term I can directly search in Wikipedia.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of custom searches in Chrome" src="http://peetronics.com/images/custom-searches.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lifehacker.com/five-custom-searches-you-should-enable-in-your-browser-5971715"&gt;The article&lt;/a&gt; from Lifehacker I read this morning explains how to take these custom searches to the next level. I tried a few things from it and have now expanded the search bar of my browser with the following keywords:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;‚Ää‚Äî‚Äägives directions on google map from my home address&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trans&lt;/strong&gt;‚Ää‚Äî‚Äätranslates from English to Dutch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vert&lt;/strong&gt;‚Ää‚Äî‚Äätranslates from Dutch to English&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ggl&lt;/strong&gt;‚Ää‚Äî‚Äädoes a google search excluding results from Stackoverflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably there will be more clever searches I can add‚Ä¶  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Productivity"></category><category term="What I Have Learned Today"></category><category term="Chrome"></category><category term="Searchbar"></category></entry><entry><title>What I Have Learned Today - #004</title><link href="http://peetronics.com/WhatIHaveLearnedToday-004.html" rel="alternate"></link><published>2019-11-08T21:00:00+00:00</published><updated>2019-11-08T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-08:/WhatIHaveLearnedToday-004.html</id><summary type="html">&lt;p&gt;Putting pairwise testing into practice&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="number_of_permutations = 3 * 6 * 8 * 2 * 13 * 2 * 2 * 2 - print(number_of_permutations) - 29952" src="http://peetronics.com/images/permutations.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Pairwise Testing&lt;/h1&gt;
&lt;p&gt;I have learned about &lt;a href="https://www.softwaretestinghelp.com/what-is-pairwise-testing/"&gt;pairwise testing&lt;/a&gt; (or sometimes called all-pairs testing) in the past as being a good test specification technique to come up with a meaningful and manageable set of test cases. Until now I have experimented with it but never used it in anger.    &lt;/p&gt;
&lt;h1&gt;All-pairs in¬†practice&lt;/h1&gt;
&lt;p&gt;At the moment I am working on a test for a complex feature of the system pictured below:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Optos Silverstone; ultra-widefield retinal imaging device with integrated, UWF-guided swept source OCT." src="http://peetronics.com/images/indy-right.png"&gt;&lt;/p&gt;
&lt;p&gt;In a workshop session this morning I gathered subject matter experts, and defined a set of parameters relevant for the feature under test. And there are a lot of them, with each a number of possible values.  &lt;/p&gt;
&lt;p&gt;Getting a full coverage with all possible permutations would have resulted in &lt;strong&gt;29952 test cases&lt;/strong&gt;. For reference, with the way the system works (keep complex in mind) it takes 1/2 an hour to fully run and analyse 1 test case. This would take almost 2 years(!) back-to-back testing to get through.  &lt;/p&gt;
&lt;p&gt;With using the test specification technique of pairwise testing, I managed to reduce the set of test cases to 62. That is a big reduction but it doesn‚Äôt compromise on coverage. With execution these tests (still 31 hours but it only will be run over the weekend) there is confidence this feature will be adequately covered.  &lt;/p&gt;
&lt;h1&gt;Tools&lt;/h1&gt;
&lt;p&gt;To make life easier applying pairwise testing it is highly recommended to use a tool. There are various ones out there; a list of them are mentioned in this &lt;a href="https://www.softwaretestinghelp.com/what-is-pairwise-testing/"&gt;article&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The one tool I particularly like is the Pairwise Independent Combinatorial Tool &lt;a href="https://github.com/microsoft/pict"&gt;(PICT)&lt;/a&gt; from Microsoft. (turns out they do make useful products üòâ). The mean reason I like is, that it is one executable which completely runs from the command line. It has got a lot of flexibility and executes quick.  &lt;/p&gt;
&lt;p&gt;A command line tool might not be your cup of tea; have a look at the other tools üòÉ.  &lt;/p&gt;
&lt;p&gt;Happy pairwising!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Testing"></category><category term="What I Have Learned Today"></category><category term="Pairwise Testing"></category><category term="Test Specification"></category><category term="Pict"></category></entry><entry><title>What I Have Learned Today - #003</title><link href="http://peetronics.com/WhatIHaveLearnedToday-003.html" rel="alternate"></link><published>2019-11-07T21:00:00+00:00</published><updated>2019-11-07T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-07:/WhatIHaveLearnedToday-003.html</id><summary type="html">&lt;p&gt;Is about project Galahad; A European Union funded project to improve screening and basic diagnostics for glaucoma&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Screenshot of Project Galahad video" src="http://peetronics.com/images/galahad.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Show and¬†Tell&lt;/h1&gt;
&lt;p&gt;Today I attended a &lt;em&gt;show and tell&lt;/em&gt; session at work. It is a monthly 1-hour event with 20 minute time-slots where people from all departments in the organisation can tell about what they are working on.  &lt;/p&gt;
&lt;p&gt;These sessions are a great way to &lt;strong&gt;learn&lt;/strong&gt; about new things that are not necessarily directly related to your day-to-day job but are fundamental to the context you work in. The information &lt;em&gt;will&lt;/em&gt; come in handy at some point!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Vertical transfoveal OCT of an eye with epiretinal fibrosis Image courtesy of Rigshospitalet (Copenhagen)" src="http://peetronics.com/images/oct.png"&gt;&lt;/p&gt;
&lt;h1&gt;Project Galahad&lt;/h1&gt;
&lt;p&gt;The topic of today‚Äôs session was about &lt;a href="https://galahad-project.eu/"&gt;project Galahad&lt;/a&gt;, which main objective is to improve screening and basic diagnostics for &lt;a href="https://www.nhs.uk/conditions/glaucoma/"&gt;glaucoma&lt;/a&gt;. The project is funded by the European Union (better together), and &lt;a href="https://www.optos.com/"&gt;Optos&lt;/a&gt;, the company I work for is part of the consortium. That makes me proud to work for this company, but that aside.  &lt;/p&gt;
&lt;p&gt;I must admit that a lot of the information that was presented goes way above my head; we‚Äôve got some really clever people working at Optos, and sometimes I feel I‚Äôm the less clever one üòè.  &lt;/p&gt;
&lt;p&gt;But I feel it is important to be exposed to information that you might not immediately grasp. It exposes areas where there is &lt;strong&gt;room for more learning&lt;/strong&gt;. And it also will add to your baggage of knowledge that you can apply in your work, and beyond.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="What I Have Learned Today"></category><category term="Show And Tell"></category><category term="Optos"></category><category term="Galahad"></category><category term="Information"></category></entry><entry><title>What I Have Learned Today - #002</title><link href="http://peetronics.com/WhatIHaveLearnedToday-002.html" rel="alternate"></link><published>2019-11-06T21:00:00+00:00</published><updated>2019-11-06T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-06:/WhatIHaveLearnedToday-002.html</id><summary type="html">&lt;p&gt;Today I learned a new word, flinciple.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="flinciple - noun - A fundamental truth or proposition that serves as the foundation for a system of belief, behaviour or for a chain of reasoning; but which is able to be modified to respond to altered circumstances" src="http://peetronics.com/images/flinciple-definition.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;I was chatting with my partner earlier and the subject came to &lt;em&gt;principles&lt;/em&gt;, and that sometimes it needs to be possible to deviate from them if circumstances call for it. In other words, be able to apply principles in a &lt;em&gt;flexible&lt;/em&gt; manner.  &lt;/p&gt;
&lt;p&gt;And then there it was; she produced the most wonderful new word I‚Äôve heard in ages: &lt;strong&gt;flinciple&lt;/strong&gt; (after discarding other candidates like &lt;em&gt;flexiple&lt;/em&gt; and &lt;em&gt;princible&lt;/em&gt;).  &lt;/p&gt;
&lt;p&gt;The context in which it was used is about cooking vegetarian:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;principle&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;cook&lt;/span&gt; &lt;span class="n"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vegetarian&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;vegan&lt;/span&gt; &lt;span class="n"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;circumstances&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;flexible&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;adjust&lt;/span&gt; &lt;span class="n"&gt;accordingly&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Surely the concept of having flexible principles can apply to the workplace¬†as¬†well. I‚Äôm definitely going to start using it.  &lt;/p&gt;
&lt;p&gt;a word of two other words smashed is called a &lt;a href="https://en.wikipedia.org/wiki/Portmanteau"&gt;portmanteau&lt;/a&gt;. I do like a good portmanteau, and flinciple is a beautiful specimen. It conveys in a single word what otherwise would need two words. Portmanteaus are omnipresent in the English language and new ones appear constantly. Here are some examples:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spork‚Ää‚Äî‚Ääspoon &amp;amp; fork&lt;/li&gt;
&lt;li&gt;Fortnight‚Ää‚Äî‚Ääfourteen &amp;amp; nights&lt;/li&gt;
&lt;li&gt;Internet‚Ää‚Äî‚Ääinternational &amp;amp; network&lt;/li&gt;
&lt;li&gt;Flextension‚Ää‚Äî‚Ääflexible &amp;amp; extension&lt;/li&gt;
&lt;li&gt;Brexit‚Ää‚Äî‚ÄäBritain &amp;amp; exit (terrible prospect)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go and start using &lt;em&gt;flinciple&lt;/em&gt; yourself¬†in¬†your¬†language. Or even better, try to come up with some of your own.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Portmanteaus"></category><category term="What I Have Learned Today"></category><category term="Flinciple"></category></entry><entry><title>What I Have Learned Today - #001</title><link href="http://peetronics.com/WhatIHaveLearnedToday-001.html" rel="alternate"></link><published>2019-11-05T21:00:00+00:00</published><updated>2019-11-05T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-05:/WhatIHaveLearnedToday-001.html</id><summary type="html">&lt;p&gt;Use a keyboard shortcut to start a windows application&lt;/p&gt;</summary><content type="html">&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Right mouse click on an application shortcut (in Windows) and there you can assign a key-binding for quick launching the application.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the windows shortcut configuration window" src="http://peetronics.com/images/notepad++.exe - Shortcut Properties 2019-11-05 20.47.37.PNG"&gt;&lt;/p&gt;
&lt;h1&gt;A bit of personal¬†history&lt;/h1&gt;
&lt;p&gt;When I first started to use computers in the early 80‚Äôs, there was no such thing as a mouse. The only input device to use was the keyboard. And I liked it. It was quick, minimum arm movement, and definitely no &lt;a href="https://en.wikipedia.org/wiki/Repetitive_strain_injury"&gt;Repetitive Strain Injury&lt;/a&gt; (RSI). ¬†
Once I got my first computer with a mouse (an Amiga 500 if you want to know), I slowly got into the habit of using the mouse more often. As that was the way to navigate a Graphical User Interface isn‚Äôt it? ¬†
After I sold my Amiga to my brother (which I sometimes regret), I bought a personal computer. That was still in the MS-DOS days. But, it had a mouse, which I used wherever I could of course. And once we moved into the windows-era there was no turning back.&lt;br&gt;
Till I started working‚Ä¶ with the (over-)excessive use of the mouse I developed a bit of RSI. And that was the trigger for me to start using the keyboard in favour if the mouse, where possible.  &lt;/p&gt;
&lt;h1&gt;Enter the tricks ‚Äòn¬†tools&lt;/h1&gt;
&lt;p&gt;To help me battle my &lt;em&gt;mouse-addiction&lt;/em&gt; I started to use tricks and tools to replace common mouse actions. Here‚Äôs a short overview of the things I picked up over the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ctrl&amp;gt;-&amp;lt;c&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ctrl&amp;gt;-&amp;lt;v&amp;gt;&lt;/code&gt; and more. The collection of the obvious keyboard shortcuts.&lt;/li&gt;
&lt;li&gt;tab-complete. On the command line, pressing tab will auto-complete path- and file-names for you. Saves a lot of typing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrow-up&lt;/code&gt;, &lt;code&gt;arrow-down&lt;/code&gt;. On the command line, this will go through your previously entered commands.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;Vimium Chrome extension&lt;/a&gt;. In Chrome I use VIM key-bindings to navigate through web pages, without having to use a mouse.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.autohotkey.com/"&gt;Autohotkey&lt;/a&gt;. A tool to create your own key-bindings. For example I use it to start applications and to control audio (volume up/down, stop/pause/play).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;But what have you actually learned¬†today?&lt;/h1&gt;
&lt;p&gt;So, today I had to change something in an application shortcut. Opened a file explorer (&lt;code&gt;&amp;lt;winkey&amp;gt;-&amp;lt;e&amp;gt;&lt;/code&gt;) and right-clicked (mouse‚Ä¶) on the shortcut. 
Did the thing I had to change and then I noticed there‚Äôs a 'shortcut key' field you can set. 
Gave it a try with &lt;code&gt;&amp;lt;ctrl&amp;gt;-&amp;lt;alt&amp;gt;-&amp;lt;n&amp;gt;&lt;/code&gt; for Notepad++ and it works!  &lt;/p&gt;
&lt;p&gt;Step-by-step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the (or create an) shortcut for the application you want to create a key-binding for&lt;/li&gt;
&lt;li&gt;Right mouse click on the shortcut&lt;/li&gt;
&lt;li&gt;Click in the shortcut key field&lt;/li&gt;
&lt;li&gt;Use a combination of &lt;code&gt;&amp;lt;ctrl&amp;gt;-&amp;lt;alt&amp;gt;-&lt;/code&gt; with any other key pressed simultaneously. You could use &lt;code&gt;&amp;lt;ctrl&amp;gt;-&amp;lt;shift&amp;gt;-&lt;/code&gt; as well if you want&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; (don‚Äôt click ok with your mouse)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This technically means you don‚Äôt have to install third-party tools to be able to launch applications from the keyboard.¬† 
I probably will keep using Autohotkey as that‚Äôs already set up the way I want (and has got the ability to export / import your bindings).&lt;br&gt;
But I can imagine there are situations where it is not allowed to install additional applications, and then the built in windows key-bindings can come in handy.&lt;/p&gt;
&lt;h1&gt;To be¬†noted&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I‚Äôve never used MacOS in anger and I‚Äôm not using Linux in a professional capacity (though I use that OS for nerdy private projects). So the bulk of my computing experience is on the Windows OS.&lt;/li&gt;
&lt;li&gt;Although I‚Äôm using VIM key-bindings in the browser I‚Äôve never really got into using VIM itself as my main text editor. Maybe I will set another challenge in the future, forcing myself to use VIM straight for a period and then maybe it will stick.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt; &lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Productivity"></category><category term="What I Have Learned Today"></category><category term="Shortcut Keys"></category><category term="Keyboard"></category></entry><entry><title>What I Have Learned Today - #000</title><link href="http://peetronics.com/WhatIHaveLearnedToday-000.html" rel="alternate"></link><published>2019-11-04T21:00:00+00:00</published><updated>2019-11-04T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-04:/WhatIHaveLearnedToday-000.html</id><summary type="html">&lt;p&gt;A challenge to share on a daily basis what I‚Äôve learned. It is important that you keep learning. Recognise that you learn something every day; However the small it is. I‚Äôm going to set myself a challenge to share on a daily basis what I‚Äôve learned that day.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;99 Things You Can Do To Become A Better Software¬†Tester&lt;/h1&gt;
&lt;p&gt;Back in August 2018 a question was asked on the Ministry of Testing website on &lt;a href="https://club.ministryoftesting.com/t/99-things-you-can-do-to-become-a-better-software-tester/17923"&gt;99 Things You Can Do To Become A Better Software Tester&lt;/a&gt;. I contributed to that as follows:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of thread response; transcript below this image" src="http://peetronics.com/images/never-stop-learning-club.PNG"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Never&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;learning&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;ask&lt;/span&gt; &lt;span class="n"&gt;myself&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;learned&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="err"&gt;?‚Äù&lt;/span&gt;  
&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;matter&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="n"&gt;ve&lt;/span&gt; &lt;span class="n"&gt;come&lt;/span&gt; &lt;span class="n"&gt;across&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;didn&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;know&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="n"&gt;little&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;learnings&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;tester&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definitely give that link above a read. There is a lot to be learned from that thread¬†:-).  &lt;/p&gt;
&lt;h1&gt;More on¬†learning&lt;/h1&gt;
&lt;p&gt;Learning doesn‚Äôt have to be explicit and by doing the mental exercise of asking myself &lt;em&gt;what I have learned today&lt;/em&gt; I ‚Äúforce‚Äù myself to also recognise the implicit learning.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="quote: ‚ÄúOnce you stop learning, you start dying‚Äù -Albert Einstein-" src="http://peetronics.com/images/lifelong-learning1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;By far I‚Äôm not an expert in this field and I speak solely from my own experience. However, I do read the occasional thing, and this &lt;a href="https://blueprintleadership.com/just-keep-learning-just-keep-learning/"&gt;article&lt;/a&gt; links very well with what I‚Äôm talking about here.  &lt;/p&gt;
&lt;p&gt;As well as reading, I‚Äôm an avid podcast and audiobook listener. In the latest episode of &lt;a href="http://theguiltytester.libsyn.com/the-guilty-tester-episode-12-testbash-manchester-unexpo-2019-part-1"&gt;The Guilty Tester Podcast&lt;/a&gt; (at time of writing), Dave Duke (&lt;a href="https://twitter.com/theguiltytester"&gt;@theguiltytester&lt;/a&gt;) talks about his recent attendance of TestBash Manchester 2019. He had a stand at the UnExpo where he collected things what people felt guilty about in testing. It touched on learning and here is some of the advice from this podcast, but make sure to subscribe and listen to the whole episode as well:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;feel&lt;/span&gt; &lt;span class="n"&gt;guilty&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;learn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;learn&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;might&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;far&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;learning&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;The challenge&lt;/h1&gt;
&lt;p&gt;I attended the same conference as Dave Duke. One of the presenters was &lt;a href="https://twitter.com/lisihocke"&gt;@lisihocke&lt;/a&gt;. She sets herself a personal challenge every year and at the conference she talked about her challenge to become more &lt;em&gt;code confident&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/lisihocke/status/1179783401139818498"&gt;Tweet of lisihocke/1179783401139818498&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;Inspired by Lisi and her great talk I wanted to set my own challenge.  &lt;/p&gt;
&lt;p&gt;As said, asking myself the question (as per the title) has been mainly a mental exercise, and so far that has been perfectly fine. But now I want to get it out of my head.&lt;/p&gt;
&lt;p&gt;As a challenge I will start to share the outcome of my daily mental exercise of asking what I have learned today with the whole wide world. Starting tomorrow (05‚Äì11‚Äì2019), I will post on Twitter a link to this Medium blog with what I have learned. Initially I will do this daily for a month and then take stock. I will see if I stick with the format, keep up with the frequency‚Ä¶ or maybe stop altogether¬†:-(.  &lt;/p&gt;
&lt;p&gt;Items to be expect can be of all sorts. Work related, testing, personal, hobby, culinary, politics, and who knows what. So as you can see, much more than testing alone.  &lt;/p&gt;
&lt;p&gt;For now I will use Medium as a blogging platform. I‚Äôve got plans for something different, but that will be a whole different challenge. More on that in the future (thanks Lisi!).  &lt;/p&gt;
&lt;p&gt;Look out for the hashtag #WhatIHaveLearnedToday  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about ‚ÄúWhat I Have Learned Today‚Äù; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Podcast"></category><category term="Personal Challenge"></category><category term="Ministry of Testing"></category><category term="What I Have Learned Today"></category></entry></feed>