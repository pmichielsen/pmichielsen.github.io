<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PeetRonics' blog - Testing</title><link href="http://peetronics.com/" rel="alternate"></link><link href="http://peetronics.com/feeds/testing.xml" rel="self"></link><id>http://peetronics.com/</id><updated>2020-08-28T21:00:00+01:00</updated><subtitle>All can be true!</subtitle><entry><title>I wish I knew more about ...</title><link href="http://peetronics.com/IWishIKnewMoreAbout.html" rel="alternate"></link><published>2020-08-28T21:00:00+01:00</published><updated>2020-08-28T21:00:00+01:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2020-08-28:/IWishIKnewMoreAbout.html</id><summary type="html">&lt;p&gt;On the importance of knowing what you don't know and knowing how to gain knowledge&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="I wish I knew more about, against a library backdrop" src="http://peetronics.com/images/i_wish.png" width="80%"&gt;&lt;/p&gt;
&lt;h1&gt;The context&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;I wish I knew more about ...&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Something I say regularly, both in a professional and private context. There are so many things I would like to know more about:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Artificial intelligence / Machine Learning&lt;/em&gt;, and how to use that in my testing profession  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Optomechanics&lt;/em&gt; (handy for my work) &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Electronics&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Linux &amp;amp; SSH&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Plumbing&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Carpentry &amp;amp; joinery&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The rules of cricket&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;British history&lt;/em&gt; (particularly handy for pub quizzes ... )  &lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think I'm quite curious person by nature and, because of that,  I have a wide variety of interests. I always want to learn about knew things. That also means a know a little about a wide variety of things, but not a lot about a few specific topics.&lt;br&gt;
Having said that though, I've been involved in test automation for most of my professional career, so I dare to call myself a &lt;em&gt;specialist&lt;/em&gt; on that front. But then immediately add that there are plenty of others that know a lot more in that area.  &lt;/p&gt;
&lt;p&gt;Based on the above, in the remainder of this post I want to touch on several aspects to come to my mind on the subject of &lt;em&gt;knowing more about&lt;/em&gt;:&lt;/p&gt;
&lt;h1&gt;How to get to know more about something&lt;/h1&gt;
&lt;p&gt;&lt;img alt="cartoon of data-information-knowledge-insight-wisdom" src="http://peetronics.com/images/knowledge.jpg" width="80%"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Every day is a school day&lt;/em&gt;, you learn every day. Be it implicitly or explicitly. I don't want to go into details on implicit learning, part from saying that it is important to acknowledge that aspect (&lt;a href="http://peetronics.com/WhatIHaveLearnedToday-000.html"&gt;I've written about that in the past&lt;/a&gt;).&lt;br&gt;
As soon as you think or say "&lt;em&gt;I wish I knew more about ...&lt;/em&gt;", you state a desire you explicitly want to learn about a topic. And then it is up to you to find a way to gather that knowledge.  &lt;/p&gt;
&lt;p&gt;There are so many ways to learn and gather knowledge:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reading&lt;/strong&gt;: books, essays, blogs, articles, manuals, technical guides&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Watching&lt;/strong&gt;: tutorials, demonstrations, conference talks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schooling&lt;/strong&gt;: classes, courses, studies, certification, workshops&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mentoring&lt;/strong&gt;: coaching, training, consulting, counseling&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practicing&lt;/strong&gt;: challenges, exercises, dojos, hackathons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With so many different options, it is important that you find the best approach for type of knowledge gathering you want to do. Some are better suited for certain purposes than others.  Wanting to know more about philosophy probably requires a more extensive study than learning how to make kimchi.&lt;/p&gt;
&lt;p&gt;And also find a way of learning what your comfortable with. For me personally, reading is not the easiest way. I rather learn by watching and having hands-on experience.&lt;/p&gt;
&lt;h1&gt;Acknowledgement of your limited knowledge&lt;/h1&gt;
&lt;p&gt;No matter how much you know about a certain topic, there probably - no, certainly - will be people out there that know as much or even more on that same topic. Several things to be said on this:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It stimulates collaboration. Know what you know, know what you don't know, know what others know, know what others don't know. Complement each other's knowledge.&lt;/li&gt;
&lt;li&gt;It allows your to keep learning. be it directly from the others you work with, be it from the vast majority of resources that are available.&lt;/li&gt;
&lt;li&gt;It shows modesty. Which is not a bad thing ...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, don't get complacent, be open to more learning.&lt;/p&gt;
&lt;h1&gt;Being fine with not knowing everything&lt;/h1&gt;
&lt;p&gt;For sure, it can be frustrating not knowing enough about a certain topic. It can make you feel insecure (&lt;em&gt;am I good enough for this job?&lt;/em&gt;), you might see yourself as an imposter, you feel unconfident amongst colleagues and peers, and, it is just annoying not knowing the answer to the winning question in a pub quiz....  &lt;/p&gt;
&lt;p&gt;Keep in mind however, that you &lt;strong&gt;can't&lt;/strong&gt; know everything and you don't &lt;strong&gt;have&lt;/strong&gt; to know everything. Be selective on the things you want to know more about. Pick out the things that can bring you further (in any way), delve into subjects that bring you joy. And for the rest, of the things you don't know, there are people &lt;strong&gt;with&lt;/strong&gt; the knowledge you can ask and collaborate with...&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Impetus for this article&lt;/h3&gt;
&lt;p&gt;I haven't written a blog post in a while, &lt;a href="http://peetronics.com/WhatIHaveLearnedToday-retrospective.html"&gt;though I made myself a promise to write more&lt;/a&gt;. But hey, that's how things go (don't beat yourself up on that Peet!).  &lt;/p&gt;
&lt;p&gt;Recently there have been a few triggers that made me decide to write this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://club.ministryoftesting.com/c/bloggers-club"&gt;The &lt;strong&gt;Ministry of Testing&lt;/strong&gt; has reignited their &lt;strong&gt;bloggers club&lt;/strong&gt;&lt;/a&gt;. I have let a few iterations slip, but ...&lt;/li&gt;
&lt;li&gt;... &lt;a href="https://club.ministryoftesting.com/t/bloggers-club-august-september-2020-i-wish-i-knew-more-about"&gt;This month's topic&lt;/a&gt; is close to my heart and think I can write a meaningful article about it&lt;/li&gt;
&lt;li&gt;Two weeks ago, I joined in on an &lt;a href="https://club.ministryoftesting.com/t/ama-how-to-start-blogging-ama-with-louise-gibbs-bruce-chris-armstrong-lee-marshall"&gt;Ask Me Anything session on blogging&lt;/a&gt;, facilitated by the Ministry of Testing, hosted by &lt;a href="https://twitter.com/BruceOnlyBruce"&gt;@BruceOnlyBruce&lt;/a&gt;, &lt;a href="https://twitter.com/christovskia"&gt;@christovskia&lt;/a&gt;, &lt;a href="https://twitter.com/Louise_J_Gibbs"&gt;@Louise_J_Gibbs&lt;/a&gt; and &lt;a href="https://twitter.com/ThePirateTester"&gt;@ThePirateTester&lt;/a&gt;. Lots of wisdom and tips in there and enough reasons on why you should write more.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And with all of that, I hadn't any excuse anymore NOT to write a blog post. What you've been reading is the result. Hope you found it useful. Feel free to &lt;a href="https://twitter.com/PeetRonics"&gt;get in touch with me&lt;/a&gt; if you want to comment or discuss.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Ministry Of Testing"></category><category term="Blogging"></category><category term="Testing"></category></entry><entry><title>What I Have Learned Today - #019</title><link href="http://peetronics.com/WhatIHaveLearnedToday-019.html" rel="alternate"></link><published>2019-11-23T21:00:00+00:00</published><updated>2019-11-23T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-23:/WhatIHaveLearnedToday-019.html</id><summary type="html">&lt;p&gt;The importance of code reviews&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="github code review example" src="http://peetronics.com/images/code-review.png" width="80%"&gt;  &lt;/p&gt;
&lt;h1&gt;The importance of code reviews&lt;/h1&gt;
&lt;p&gt;Code reviews are one of many important mechanisms (or rituals if you like) to ensure &lt;em&gt;quality&lt;/em&gt; of your software project/product. Potential bugs can be caught early as well as negative performance / security implications.  &lt;/p&gt;
&lt;p&gt;What I find though, what is not mentioned enough, is that code reviews are also a great vehicle for knowledge transfer. By participating as a reviewer you can &lt;strong&gt;learn&lt;/strong&gt; a lot.  &lt;/p&gt;
&lt;p&gt;That’s why I make an effort to get involved in code reviews as much as possible.  &lt;/p&gt;
&lt;h1&gt;Respectful Reviews&lt;/h1&gt;
&lt;p&gt;While enjoying my morning cup of coffee and reading through blog posts, I came across this &lt;a href="https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html"&gt;article&lt;/a&gt; from the &lt;a href="https://testing.googleblog.com/"&gt;Google Testing Blog&lt;/a&gt;. It is list of &lt;em&gt;do’s&lt;/em&gt; and &lt;em&gt;don’ts&lt;/em&gt; for code reviews, aimed both at authors and reviewers. A quick read and very helpful tips to make reviews better.  &lt;/p&gt;
&lt;p&gt;As an added bonus the article can be printed on one &lt;a href="https://docs.google.com/document/d/1_Gljf1TMTV2WPsiXCdk8oIkiq6uiajN_IqGdlD7u3Mc/edit"&gt;A-4&lt;/a&gt;, which you can hang on the toilet of your office. Probably something I will do when I’m back in the office 😄.  &lt;/p&gt;
&lt;h1&gt;Going down the rabbit hole&lt;/h1&gt;
&lt;p&gt;The last bullet-point of that article refers to a page on how to deal with &lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html#conflicts"&gt;conflicts&lt;/a&gt; during code reviews. Which is part of a wider set of &lt;a href="https://google.github.io/eng-practices/"&gt;guidelines&lt;/a&gt; around code reviews that Google produced. More reading, more &lt;strong&gt;learning&lt;/strong&gt; and something to share with the team.  &lt;/p&gt;
&lt;p&gt;Have a great weekend!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about “What I Have Learned Today”; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Software Development"></category><category term="Testing"></category><category term="What I Have Learned Today"></category></entry><entry><title>What I Have Learned Today - #013</title><link href="http://peetronics.com/WhatIHaveLearnedToday-013.html" rel="alternate"></link><published>2019-11-17T21:00:00+00:00</published><updated>2019-11-17T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-17:/WhatIHaveLearnedToday-013.html</id><summary type="html">&lt;p&gt;Honing your skills by play&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Image of the card game Set" src="http://peetronics.com/images/set.jpg" width="80%"&gt;  &lt;/p&gt;
&lt;h1&gt;Play&lt;/h1&gt;
&lt;p&gt;It is well known that playing board- and card-games has got numerous benefits. Plenty of &lt;a href="https://www.dumblittleman.com/benefits-of-playing-board-games/"&gt;articles&lt;/a&gt; have been written about it so I will refrain from re-iterating. Part from all the mentioned benefits, for me probably the biggest one is that it is fun 😄. So it’s no secret I’m always up for a game of any sort.  &lt;/p&gt;
&lt;h1&gt;Set&lt;/h1&gt;
&lt;p&gt;A card game I particularly like is &lt;a href="https://en.wikipedia.org/wiki/Set_(card_game)"&gt;Set&lt;/a&gt;. Simple in concept, yet very gripping. Simplest explanation is to find three cards that are completely similar or opposite in shape, filling, colour or number (follow the link for full rules).The player that sees the similarities / opposites first gets the cards. Most cards wins.I believe that particularly this is a game that sits close to my profession as software tester, in which looking for patterns, similarities, opposites is a key part of your job.  &lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So yes, even on a lazy Sunday while playing games, I’m learning to hone my professional skills…Have fun!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about “What I Have Learned Today”; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="What I Have Learned Today"></category><category term="Testing"></category><category term="Skills"></category></entry><entry><title>What I Have Learned Today - #011</title><link href="http://peetronics.com/WhatIHaveLearnedToday-011.html" rel="alternate"></link><published>2019-11-15T21:00:00+00:00</published><updated>2019-11-15T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-15:/WhatIHaveLearnedToday-011.html</id><summary type="html">&lt;p&gt;Test before push&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick one today&lt;br&gt;
I did a code refactor &lt;a href="http://peetronics.com/WhatIHaveLearnedToday-008.html"&gt;3 days ago&lt;/a&gt;. Today I &lt;strong&gt;learnt&lt;/strong&gt; the importance of testing before pushing your code changes.  &lt;/p&gt;
&lt;p&gt;Because of the refactoring, a portion of the nightly regression tests misbehaved. And I only realised today 😦. Of course I did test the few scenarios before committing the changes; yet… I didn’t cater for all possible paths. Luckily a fix was readily available.  &lt;/p&gt;
&lt;p&gt;So next time I do a refactor, I need to remember to test, test, and… TEST!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about “What I Have Learned Today”; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="What I Have Learned Today"></category><category term="Testing"></category></entry><entry><title>What I Have Learned Today - #004</title><link href="http://peetronics.com/WhatIHaveLearnedToday-004.html" rel="alternate"></link><published>2019-11-08T21:00:00+00:00</published><updated>2019-11-08T21:00:00+00:00</updated><author><name>Peet Michielsen</name></author><id>tag:peetronics.com,2019-11-08:/WhatIHaveLearnedToday-004.html</id><summary type="html">&lt;p&gt;Putting pairwise testing into practice&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="number_of_permutations = 3 * 6 * 8 * 2 * 13 * 2 * 2 * 2 - print(number_of_permutations) - 29952" src="http://peetronics.com/images/permutations.png" width="80%"&gt;&lt;/p&gt;
&lt;h1&gt;Pairwise Testing&lt;/h1&gt;
&lt;p&gt;I have learned about &lt;a href="https://www.softwaretestinghelp.com/what-is-pairwise-testing/"&gt;pairwise testing&lt;/a&gt; (or sometimes called all-pairs testing) in the past as being a good test specification technique to come up with a meaningful and manageable set of test cases. Until now I have experimented with it but never used it in anger.    &lt;/p&gt;
&lt;h1&gt;All-pairs in practice&lt;/h1&gt;
&lt;p&gt;At the moment I am working on a test for a complex feature of the system pictured below:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Optos Silverstone; ultra-widefield retinal imaging device with integrated, UWF-guided swept source OCT." src="http://peetronics.com/images/indy-right.png"&gt;&lt;/p&gt;
&lt;p&gt;In a workshop session this morning I gathered subject matter experts, and defined a set of parameters relevant for the feature under test. And there are a lot of them, with each a number of possible values.  &lt;/p&gt;
&lt;p&gt;Getting a full coverage with all possible permutations would have resulted in &lt;strong&gt;29952 test cases&lt;/strong&gt;. For reference, with the way the system works (keep complex in mind) it takes 1/2 an hour to fully run and analyse 1 test case. This would take almost 2 years(!) back-to-back testing to get through.  &lt;/p&gt;
&lt;p&gt;With using the test specification technique of pairwise testing, I managed to reduce the set of test cases to 62. That is a big reduction but it doesn’t compromise on coverage. With execution these tests (still 31 hours but it only will be run over the weekend) there is confidence this feature will be adequately covered.  &lt;/p&gt;
&lt;h1&gt;Tools&lt;/h1&gt;
&lt;p&gt;To make life easier applying pairwise testing it is highly recommended to use a tool. There are various ones out there; a list of them are mentioned in this &lt;a href="https://www.softwaretestinghelp.com/what-is-pairwise-testing/"&gt;article&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The one tool I particularly like is the Pairwise Independent Combinatorial Tool &lt;a href="https://github.com/microsoft/pict"&gt;(PICT)&lt;/a&gt; from Microsoft. (turns out they do make useful products 😉). The mean reason I like is, that it is one executable which completely runs from the command line. It has got a lot of flexibility and executes quick.  &lt;/p&gt;
&lt;p&gt;A command line tool might not be your cup of tea; have a look at the other tools 😃.  &lt;/p&gt;
&lt;p&gt;Happy pairwising!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is part of a series of articles about “What I Have Learned Today”; acknowledging every day the thing I have learned. Feel free to read the other posts. all opinions in this article are my own and not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Blog"></category><category term="Testing"></category><category term="What I Have Learned Today"></category></entry></feed>